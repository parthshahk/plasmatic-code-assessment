service: petstore
frameworkVersion: "3"

plugins:
    - serverless-offline

custom:
    pets: "pets-${sls:stage}"
    orders: "orders-${sls:stage}"
    petCategories: "petCategories-${sls:stage}"
    storageBucket: "petstore-${sls:stage}"
    sqsQueue: "petstore-${sls:stage}"

provider:
    name: aws
    runtime: nodejs14.x
    stage: dev
    region: ca-central-1
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                  Resource:
                      - Fn::GetAtt: [OrderTable, Arn]
                      - Fn::GetAtt: [PetTable, Arn]
                      - Fn::GetAtt: [PetCategoryTable, Arn]
                - Effect: Allow
                  Action:
                      - s3:*
                  Resource:
                      - Fn::GetAtt: [StorageBucket, Arn]
                - Effect: Allow
                  Action:
                      - sqs:*
                  Resource:
                      - Fn::GetAtt: [StorageQueue, Arn]

    environment:
        ORDER_TABLE: ${self:custom.orders}
        PET_TABLE: ${self:custom.pets}
        PET_CATEGORY_TABLE: ${self:custom.petCategories}
        STORAGE_BUCKET: ${self:custom.storageBucket}

functions:
    pet:
        handler: handler.handler
        events:
            - httpApi:
                  path: /pet/{any+}
                  method: ANY
    store:
        handler: handler.handler
        events:
            - httpApi:
                  path: /store/{any+}
                  method: ANY
    generateThumbnail:
        handler: handler.generateThumbnail
        events:
            - sqs:
                  arn:
                      Fn::GetAtt: [StorageQueue, Arn]
                  batchSize: 1

resources:
    Resources:
        PetTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:custom.pets}
        OrderTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:custom.orders}
        PetCategoryTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:custom.petCategories}
        StorageQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: ${self:custom.sqsQueue}
        StorageBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.storageBucket}
        QueuePolicy:
            Type: AWS::SQS::QueuePolicy
            Properties:
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Principal: "*"
                          Action: sqs:SendMessage
                          Resource: !GetAtt StorageQueue.Arn
                          Condition:
                              ArnEquals:
                                  aws:SourceArn: !GetAtt StorageBucket.Arn
                Queues:
                    - !Ref StorageQueue
